#!/usr/bin/python

import time

NumpyImported=False
try:
    i=2
    #import numpy
    #from numpy import sin, cos, pi
    #NumpyImported=True
except ImportError:
    #print("Warning: no numpy found, routines will be slow")
    pass
"""
T0H: 0.35   -> 2p=0.31  3p=0.47
T0L: 0.80   -> 6p=0.94  5p=0.78
T1H: 0.70   -> 4p=0.625 5p=0.78
T1L: 0.60   -> 4p=0.625 3p=0.47
"""

def write2812_numpy8(spi,data):
    d=numpy.array(data).ravel()
    tx=numpy.zeros(len(d)*8, dtype=numpy.uint8)
    for ibit in range(8):
        #print ibit
        #print ((d>>ibit)&1)
        #tx[7-ibit::8]=((d>>ibit)&1)*0x18 + 0xE0   #0->3/5, 1-> 5/3 
        #tx[7-ibit::8]=((d>>ibit)&1)*0x38 + 0xC0   #0->2/6, 1-> 5/3
        tx[7-ibit::8]=((d>>ibit)&1)*0x78 + 0x80    #0->1/7, 1-> 5/3
        #print [hex(v) for v in tx]
    #print [hex(v) for v in tx]
    spi.xfer(tx.tolist(), int(8/1.25e-6))
    #spi.xfer(tx.tolist(), int(8e6))
    
def write2812_numpy4(spi,data):
    #print spi
    d=numpy.array(data).ravel()
    tx=numpy.zeros(len(d)*4, dtype=numpy.uint8)
    for ibit in range(4):
        #print ibit
        #print ((d>>(2*ibit))&1), ((d>>(2*ibit+1))&1)
        tx[3-ibit::4]=((d>>(2*ibit+1))&1)*0x60 + ((d>>(2*ibit+0))&1)*0x06 +  0x88
        #print [hex(v) for v in tx]
    #print [hex(v) for v in tx]
    spi.xfer(tx.tolist(), int(4/1.25e-6)) #works, on Zero (initially didn't?)
    #spi.xfer(tx.tolist(), int(4/1.20e-6))  #works, no flashes on Zero, Works on Raspberry 3
    #spi.xfer(tx.tolist(), int(4/1.15e-6))  #works, no flashes on Zero
    #spi.xfer(tx.tolist(), int(4/1.05e-6))  #works, no flashes on Zero
    #spi.xfer(tx.tolist(), int(4/.95e-6))  #works, no flashes on Zero
    #spi.xfer(tx.tolist(), int(4/.90e-6))  #works, no flashes on Zero
    #spi.xfer(tx.tolist(), int(4/.85e-6))  #doesn't work (first 4 LEDS work, others have flashing colors)
    #spi.xfer(tx.tolist(), int(4/.65e-6))  #doesn't work on Zero; Works on Raspberry 3
    #spi.xfer(tx.tolist(), int(4/.55e-6))  #doesn't work on Zero; Works on Raspberry 3
    #spi.xfer(tx.tolist(), int(4/.50e-6))  #doesn't work on Zero; Doesn't work on Raspberry 3 (bright colors)
    #spi.xfer(tx.tolist(), int(4/.45e-6))  #doesn't work on Zero; Doesn't work on Raspberry 3
    #spi.xfer(tx.tolist(), int(8e6))

def write2812_pylist8(spi, data):
    tx=[]
    for rgb in data:
        for byte in rgb: 
            for ibit in range(7,-1,-1):
                tx.append(((byte>>ibit)&1)*0x78 + 0x80)
    spi.xfer(tx, int(8/1.25e-6))

def write2812_pylist4(spi, data):
    print("pylist4")
    tx=[]
    for rgb in data:
        for byte in rgb: 
            for ibit in range(3,-1,-1):
                #print ibit, byte, ((byte>>(2*ibit+1))&1), ((byte>>(2*ibit+0))&1), [hex(v) for v in tx]
                tx.append(((byte>>(2*ibit+1))&1)*0x60 +
                          ((byte>>(2*ibit+0))&1)*0x06 +
                          0x88)
    #print [hex(v) for v in tx]
    spi.xfer3(tx, int(4/1.05e-6))


if NumpyImported:
    write2812=write2812_numpy4
else:
    write2812=write2812_pylist4    


if __name__=="__main__":
    
    import spidev
    import time
    import getopt
    import sys

    def i(x,y):
        if x < 0: 
            print("x<0")
            return
        if x > 63: 
            print("x>63")
            return 
        if y< 0:
            print("y<0")
            return 
        if y > 8: 
            print("y>8")
            return 
        if x%2:
            return x*8 + y
        else:
            return x*8 + 7 -y


    def drawverticalline(leds, x, y, len, color):
        print(x)
        print(y)
        print(len)
        print(color)
        for j in range (len): 
            leds[i(x, y+j)] = color #leds[i(0,0)] #color
        print("line")
        print(leds)
        return leds


    def drawhorizontalline(leds, x, y, len, color):
        print(x)
        print(y)
        print(len)
        print(color)
        for j in range (len): 
            leds[i(x+j, y)] = color #leds[i(0,0)] #color
        print("line")
        print(leds)
        return leds


    def shift_right(leds):
        '''
        0 < 15
        1 < 14
        2 < 13
        3 < 12
        4 < 11
        5 < 10
        6 < 9
        7 < 8 
 
        8 < 23
        9 < 22
        10 < 21 
        11 < 20
        12 < 19
        13 < 18
        14 < 17
        15 < 16 

        '''
        for i in range(55*8):
            x = i // 8
            y = i % 8 
            #if x%2:
            #leds[55*8-1 - i] = 
            leds[50*8-1 - (i+16 -1 - 2*y)] = leds[50*8-1 - i] 
            #else:
            #    leds[i] = leds[i+8]
        return leds


    def shift_left(leds):
        '''
        0 < 15
        1 < 14
        2 < 13
        3 < 12
        4 < 11
        5 < 10
        6 < 9
        7 < 8 
 
        8 < 23
        9 < 22
        10 < 21 
        11 < 20
        12 < 19
        13 < 18
        14 < 17
        15 < 16 
        
        '''
        for i in range(55*8, -1, -1):
            x = i // 8
            y = i % 8 
            #if x%2:
            leds[i] = leds[i+16 -1 - 2*y]
            #else:
            #    leds[i] = leds[i+8]
        return leds



    def test_turn_light_left(spi):
        print("turn light lefT")
        color_orange = [30, 30, 0]
        color_black  = [0,0,0]
        color_pink = [0, 30, 30]
        color_red = [0, 30, 0]
        color_green = [30, 0, 0]
        color_blue = [0, 0, 30]
        leds = [color_black]*8*64

        print(leds)
        write2812(spi, leds)

        #leds[i(3,3)] = color_orange
        #leds[i(4,3)] = color_orange
        #leds[i(5, 3)] = [30, 30, 0]
        #leds[i(6,3)] = [30, 30, 0]
        #leds[i(7, 3)] = [30, 30, 0]
        #leds[i(8,3)] = color_orange
        #leds[i(9, 3)] = color_orange
        #leds[i(10, 3)] = color_orange
        #leds[i(11,3)] = color_orange
        #leds[i(12,3)] = color_orange
        #leds[i(13,3)] = color_orange

        leds = drawhorizontalline(leds, 3, 4, 11, color_orange)   
        leds = drawhorizontalline(leds, 3, 5, 11, color_orange)   
        leds = drawhorizontalline(leds, 3, 6, 11, color_orange)   

        leds = drawverticalline(leds, 15, 0, 8, color_red)   
        leds = drawverticalline(leds, 18, 1, 5, color_blue)   


        print(leds)

        write2812(spi, leds)

        time.sleep(5)

        #time.sleep(0.2) 

        #leds[i(2,3)] = color_orange
        #leds[i(13,3)] = [0, 0, 0]
        #write2812(spi, leds)
        #time.sleep(0.2)

        #leds[i(1,3)] = color_orange
        #leds[i(12,3)] = [0, 0, 0]
        #write2812(spi, leds)
        #time.sleep(0.2)

        #leds[i(0,3)] = color_orange
        #leds[i(11,3)] = [0, 0, 0]
        #write2812(spi, leds)
        #time.sleep(0.2)

        #leds[2*8+3] = color_orange
        #leds[i(10,3)] = [0, 0, 0]
        #write2812(spi, leds)
        #time.sleep(0.2)

        #leds[2*8+3] = color_orange
        #leds[i(9,3)] = [0, 0, 0]
        #write2812(spi, leds)
        #time.sleep(0.2)

        #leds[2*8+3] = color_orange
        #leds[i(8,3)] = [0, 0, 0]
        #write2812(spi, leds)
        #time.sleep(0.2)

        #leds[2*8+3] = color_orange
        #leds[i(7,3)] = [0, 0, 0]
        #write2812(spi, leds)
        #time.sleep(0.2)

        leds = shift_left(leds)
        #print(leds)
        write2812(spi, leds)
        time.sleep(1)

        leds = shift_left(leds)
        write2812(spi, leds)
        time.sleep(1)

        leds = shift_left(leds)
        write2812(spi, leds)
        time.sleep(1)


        leds = shift_left(leds)
        write2812(spi, leds)
        time.sleep(1)

        leds = shift_left(leds)
        write2812(spi, leds)
        time.sleep(1)


        for i in range(4):
            leds = shift_left(leds)
            write2812(spi, leds) 
            time.sleep(0.1)

        time.sleep(10)

        for i in range(10):
            leds = shift_right(leds)
            write2812(spi, leds) 
            time.sleep(5)









    def test_fixed(spi):
        #write fixed pattern for 8 LEDs
        #This will send the following colors:
        #   Red, Green, Blue,
        #   Purple, Cyan, Yellow,
        #   Black(off), White 
        write2812(spi, [
			[10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],

                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],

                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],

                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],

                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],

                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],

                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],

                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],

                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],


                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],

                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],


                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],

                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [0,10,0], [0,0,10],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0], [10,10,10],
                        [10,0,0], [0,100,0], [0,0,100],
                        [0,10,10], [10,0,10], [10,10,0],
                        [10,0,0]


			])
    def test_off(spi, nLED=8):
        #switch all nLED chips OFF.
        write2812(spi, [[0,0,0]]*nLED)
    def usage():
        print("usage: ...")
    
    
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hn:c:t:l", ["help", "color=", "test", "lightturnleft"])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err)) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    color=None
    nLED=8
    doTest=False
    print("2") 
    print(opts)
    testTurnLightLeft = False
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-c", "--color"):
            color=a
        elif o in ("-n", "--nLED"):
            nLED=int(a)
        elif o in ("-t", "--test"):
            doTest=True
        elif o in ("-l", "--lightturnleft"):
            print("1")
            testTurnLightLeft = True
        else:
            assert False, "unhandled option"

    spi = spidev.SpiDev()
    spi.open(0,0)

    if color!=None:
        write2812(spi, eval(color)*nLED)
        print(color) 
        print(eval(color))
    elif doTest:
        test_fixed(spi)
    elif testTurnLightLeft:
        test_turn_light_left(spi)
    else:
        usage()


